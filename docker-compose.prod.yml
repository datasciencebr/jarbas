version: '3'
services:

  proxy:
    image: jwilder/nginx-proxy
    ports:
      - "443:443"
      - "80:80"
    networks:
      - backend
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true"
    deploy:
      replicas: 4
      restart_policy:
        condition: on-failure
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - proxy-certs:/etc/nginx/certs
      - proxy-vhost:/etc/nginx/vhost.d
      - proxy-public:/usr/share/nginx/html

  proxy-certs:
    image: jrcs/letsencrypt-nginx-proxy-companion
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - proxy-certs:/etc/nginx/certs:rw
      - proxy-vhost:/etc/nginx/vhost.d
      - proxy-public:/usr/share/nginx/html
    environment:
      NGINX_PROXY_CONTAINER: proxy
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  django:
    env_file:
      - .env.prod
    networks:
      - backend
    environment:
      DEBUG: "False"
      ALLOWED_HOSTS: ${VIRTUAL_HOST_WEB}
    depends_on:
      - memcached
    volumes:
      - assets:/code/staticfiles
    command: ["gunicorn", "jarbas.wsgi:application", "--reload", "--bind", "0.0.0.0:8000"]
    deploy:
      replicas: 4
      restart_policy:
        condition: on-failure

  tasks:
    env_file:
      - .env
    networks:
      - backend
    environment:
      - DEBUG=False
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  queue:
    networks:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager

  elm:
    command: ["npm", "run", "assets"]
    volumes:
      - assets:/code/jarbas/layers/static
    deploy:
      replicas: 1

  postgres:
    networks:
      - backend
    command: ["-c", "random_page_cost=1"]
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager

  memcached:
    image: memcached:1.5.1-alpine
    networks:
      - backend
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  nginx:
    image: datasciencebr/jarbas-server
    networks:
      - backend
    depends_on:
      - django
    volumes:
      - assets:/code/staticfiles
    environment:
      LETSENCRYPT_HOST: ${VIRTUAL_HOST_WEB}
      VIRTUAL_HOST: ${VIRTUAL_HOST_WEB}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL:-op.serenatadeamor@gmail.com}
      HTTPS_METHOD: ${HTTPS_METHOD:-redirect}
      VIRTUAL_PROTO: http
    deploy:
      replicas: 4
      restart_policy:
        condition: on-failure

volumes:
  assets:
  proxy-certs:
  proxy-vhost:
  proxy-public:

networks:
  backend:
